# This test flow confirms that reindexing operations can handle search parameters that
# have base type = "Resource", meaning that they can operate on all types of resources.
# It first creates two test resources: a patient and an observation.
# Next, it creates a search parameter resource and triggers a reindexing operation.
# Finally, it uses the new search parameter to confirm the search parameter
# is enabled and the resources were successfully reindexed.
#
# This test assumes the following local environment setup:
# 1. appsettings.json has Security.Enabled = false and Reindex.Enabled = true
# 2. The datastore is Cosmos DB
# 3. The version is R4 or R5

@baseUrl = https://localhost:44348
@contentType = application/json

###
# Create a patient resource.
# @name patient
POST {{baseUrl}}/Patient HTTP/1.1
content-type: {{contentType}}

< ./Data/ReindexPatient.json

### Records the patient id
@patientId = {{patient.response.body.id}}

###
# Create an observation resource.
# Copy the observation's ID in the response body and paste it in the observationId variable.
# @name observation
POST {{baseUrl}}/Observation HTTP/1.1
content-type: {{contentType}}

< ./Data/ReindexObservation.json

### Records the observation id
@observationId = {{observation.response.body.id}}

###
# Create a new search parameter that will return the resource ID.
# This will have the same behaviour as the existing search parameter, "_id".
POST {{baseUrl}}/SearchParameter HTTP/1.1
content-type: {{contentType}}

< ./Data/ReindexSearchParameter.json

###
# Trigger a reindexing operation.
# @name reindex
POST {{baseUrl}}/$reindex HTTP/1.1
content-type: {{contentType}}

{  "resourceType": "Parameters", "parameter": [] }

### Records the reindex job location
@reindexLocation = {{reindex.response.headers.Content-Location}}

###
# Check the status of the reindexing operation (scroll down in the response body to see the status).
GET {{reindexLocation}} HTTP/1.1

###
# This should return a single patient.
GET {{baseUrl}}/Patient?test-id-code={{patientId}}&_total=accurate HTTP/1.1

###
# This shouldn't return anything.
GET {{baseUrl}}/Patient?test-id-code=nonexistent-id&_total=accurate HTTP/1.1

###
# This should return a single observation.
GET {{baseUrl}}/Observation?test-id-code={{observationId}}&_total=accurate HTTP/1.1

###
# This shouldn't return anything.
GET {{baseUrl}}/Observation?test-id-code=nonexistent-id&_total=accurate HTTP/1.1
