<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidConsistencyLevel" xml:space="preserve">
    <value>Consistency level '{0}' specified in the request is invalid when service is configured with consistency level '{1}'. Ensure the request consistency level is not stronger than the service consistency level.</value>
  </data>
  <data name="UnhandledEnumValue" xml:space="preserve">
    <value>Unhandled {0} '{1}'.</value>
  </data>
  <data name="UnrecognizedConsistencyLevel" xml:space="preserve">
    <value>Invalid consistency level '{0}'. Valid values are: {1}.</value>
  </data>
  <data name="AadClientCredentialsGrantFailure" xml:space="preserve">
    <value>Failed to get or access the Azure AD token to access the customer-managed key.</value>
  </data>
  <data name="AadServiceUnavailable" xml:space="preserve">
    <value>Azure AD service is unavailable to get access to the customer-managed key.</value>
  </data>
  <data name="KeyVaultAuthenticationFailure" xml:space="preserve">
    <value>Key Vault does not grant permission to the Azure AD, or the customer-managed key is disabled.</value>
  </data>
  <data name="KeyVaultKeyNotFound" xml:space="preserve">
    <value>The customer-managed key is not found.</value>
  </data>
  <data name="KeyVaultServiceUnavailable" xml:space="preserve">
    <value>The Key Vault Service is unavailable to access the customer-managed key.</value>
  </data>
  <data name="KeyVaultWrapUnwrapFailure" xml:space="preserve">
    <value>Failure to Wrap or Unwrap the customer-managed key.</value>
  </data>
  <data name="InvalidKeyVaultKeyUri" xml:space="preserve">
    <value>The customer-managed key URI is invalid.</value>
  </data>
  <data name="InvalidInputBytes" xml:space="preserve">
    <value>Internal server error: the input bytes are not in base64 format.</value>
  </data>
  <data name="KeyVaultInternalServerError" xml:space="preserve">
    <value>Key Vault internal service errors accessing the customer-managed key.</value>
  </data>
  <data name="KeyVaultDnsNotResolved" xml:space="preserve">
    <value>Could not resolve the DNS name of the Key Vault of the customer-managed key.</value>
  </data>
  <data name="CmkDefaultError" xml:space="preserve">
    <value>There was an error using the customer-managed key.</value>
  </data>
  <data name="IncludeIterateNotSupported" xml:space="preserve">
    <value>_include:iterate and _revinclude:iterate are not supported.</value>
  </data>
  <data name="ChainedExpressionSubqueryLimit" xml:space="preserve">
    <value>Sub-queries in a chained expression cannot return more than {0} results, please use a more selective criteria.</value>
  </data>
  <data name="InvalidCosmosContinuationTokenSize" xml:space="preserve">
    <value>ContinuationTokenSize '{0}'Kb specified in the request is invalid. Valid limits are between 1 - 3 Kb.</value>
  </data>
  <data name="InvalidFeedRange" xml:space="preserve">
    <value>Provided feed range is invalid and could not be parsed.</value>
  </data>
  <data name="NotAbleToExecuteQuery" xml:space="preserve">
    <value>Not able to execute a query. Retry the operation.</value>
  </data>
</root>