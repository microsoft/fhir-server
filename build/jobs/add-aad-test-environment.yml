steps:
- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: resolute-oss-tenant-info'
  inputs:
    azureSubscription: $(ConnectedServiceName)
    KeyVaultName: 'resolute-oss-tenant-info'

- task: AzurePowerShell@5
  displayName: Setup AAD Test Environment
  inputs:
    azureSubscription: $(ConnectedServiceName)
    azurePowerShellVersion: latestVersion
    ScriptType: inlineScript
    Inline: |
      Install-Module -Name AzureAD -Force -Verbose -Scope CurrentUser
      $module = Get-Module -Name AzureAD
      Write-Host $module.version

      $tenantId = "$(tenant-id)"

      # Get admin token

      $username = "$(tenant-admin-service-principal-name)"
      $clientId = "$(tenant-admin-service-principal-id)"
      $password_raw =  "$(tenant-admin-service-principal-password)"
      $password =  ConvertTo-SecureString -AsPlainText $password_raw -Force
      $adminCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $clientId, $password

      $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"
      $resource = "https://graph.windows.net/"

      $body = @{
          grant_type = "client_credentials"
          client_id  = $clientId
          client_secret = $password_raw
          resource   = $resource
      }

      # If a deleted keyvault exists, remove it first
      $environmentName = "$(DeploymentEnvironmentName)".ToLower() -replace "\.", "" 
      Write-Host "Installed module and set variables"

      $vaultName = "${environmentName}-ts"
      if (Get-AzKeyVault -VaultName $vaultName -Location "westus" -InRemovedState)
      {
          Write-Host "Attempting to delete vault ${vaultName}"
          try
          {
              Remove-AzKeyVault -VaultName $vaultName -InRemovedState -Location "westus" -Force
          }
          catch
          {
              if ($_.ErrorDetails -eq "Operation 'DeletedVaultPurge' is not allowed.")
              {
                  # With purge protection enabled, it's impossible to delete a Key Vault before its expiration.

                  Write-Error "Unable to delete vault ${vaultName}."
                  Write-Error $_.ErrorDetails
              }
              else
              { 
                  throw $_
              }
          }
      }
      Write-Host "Cleaned up keyvaults"

      try 
      {
          Write-Host "Getting access token"
          $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
      }
      catch 
      {
          Write-Error $_.ErrorDetails
      }
      Write-Host "Got access token"

      Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $clientId

      Write-Host "Connected to Azure AD"
      Import-Module $(System.DefaultWorkingDirectory)/samples/scripts/PowerShell/FhirServer/FhirServer.psd1
      Import-Module $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/FhirServerRelease/FhirServerRelease.psd1

      Write-Host "Imported modules"
      $output = Add-AadTestAuthEnvironment -TestAuthEnvironmentPath $(System.DefaultWorkingDirectory)/testauthenvironment.json -EnvironmentName $environmentName -ResourceGroupName $(ResourceGroupName) -TenantAdminCredential $adminCredential -TenantId $tenantId
