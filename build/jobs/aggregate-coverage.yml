steps:
  - checkout: none

  # Download all coverage artifacts from all test stages
  - task: DownloadPipelineArtifact@2
    displayName: 'Download all coverage artifacts'
    inputs:
      path: '$(Pipeline.Workspace)/AllCoverage'
      patterns: |
        Coverage_UnitTests/**
        Coverage_IntegrationTests_*/**

  # Aggregate all coverage files into a single report
  - task: reportgenerator@5
    displayName: 'Aggregate all coverage reports'
    inputs:
      reports: '$(Pipeline.Workspace)/AllCoverage/**/Cobertura.xml'
      reporttypes: 'Cobertura;HtmlInline_AzurePipelines'
      targetdir: '$(Pipeline.Workspace)/AggregatedCoverage'

  # Publish the aggregated coverage artifact
  - task: PublishBuildArtifacts@1
    displayName: 'Publish aggregated coverage artifact'
    continueOnError: true  # Allow re-runs if artifact already exists
    inputs:
      pathToPublish: '$(Pipeline.Workspace)/AggregatedCoverage'
      artifactName: 'Coverage_Aggregated'
      artifactType: 'container'

  # Publish to Azure DevOps for pipeline UI visualization
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish aggregated code coverage to pipeline'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Pipeline.Workspace)/AggregatedCoverage/Cobertura.xml'
      reportDirectory: '$(Pipeline.Workspace)/AggregatedCoverage'
      failIfCoverageEmpty: false

  # Check coverage threshold and fail pipeline if below minimum
  - task: PowerShell@2
    displayName: 'Verify coverage meets minimum threshold'
    inputs:
      targetType: 'inline'
      script: |
        $coberturaPath = "$(Pipeline.Workspace)/AggregatedCoverage/Cobertura.xml"
        $minLineRate = 0.65  # 65% minimum line coverage
        $minBranchRate = 0.60  # 60% minimum branch coverage
        
        Write-Host "Reading coverage from: $coberturaPath"
        [xml]$coverage = Get-Content $coberturaPath
        
        $lineRate = [double]$coverage.coverage.'line-rate'
        $branchRate = [double]$coverage.coverage.'branch-rate'
        $linePercent = [math]::Round($lineRate * 100, 2)
        $branchPercent = [math]::Round($branchRate * 100, 2)
        
        Write-Host ""
        Write-Host "=== Coverage Results ===" -ForegroundColor Cyan
        Write-Host "Line Coverage:   $linePercent% (minimum: $($minLineRate * 100)%)" -ForegroundColor $(if ($lineRate -ge $minLineRate) { "Green" } else { "Red" })
        Write-Host "Branch Coverage: $branchPercent% (minimum: $($minBranchRate * 100)%)" -ForegroundColor $(if ($branchRate -ge $minBranchRate) { "Green" } else { "Red" })
        Write-Host ""
        
        $failed = $false
        if ($lineRate -lt $minLineRate) {
          Write-Host "##vso[task.logissue type=error]Line coverage $linePercent% is below minimum threshold of $($minLineRate * 100)%"
          $failed = $true
        }
        if ($branchRate -lt $minBranchRate) {
          Write-Host "##vso[task.logissue type=error]Branch coverage $branchPercent% is below minimum threshold of $($minBranchRate * 100)%"
          $failed = $true
        }
        
        if ($failed) {
          Write-Host "##vso[task.complete result=Failed;]Coverage threshold check failed"
          exit 1
        } else {
          Write-Host "âœ“ Coverage meets minimum thresholds" -ForegroundColor Green
        }
