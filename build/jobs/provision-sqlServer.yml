parameters:
- name: resourceGroup
  type: string
- name: sqlServerName
  type: string
- name: adminUserAssignedManagedIdentityName
  type: string
  default: ''
- name: adminApplicationId
  type: string
  default: ''

jobs:
- job: provisionEnvironment
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: resolute-oss-tenant-info'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: 'resolute-oss-tenant-info'

  - task: AzurePowerShell@5
    displayName: 'Azure PowerShell script: InlineScript'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Add-Type -AssemblyName System.Web

        $adminUserAssignedManagedIdentityName = "${{ parameters.adminUserAssignedManagedIdentityName }}"
        $adminApplicationId = "${{ parameters.adminApplicationId }}"

        if ($adminUserAssignedManagedIdentityName -ne "") {
          # Fetch principalId and tenantId for managed identity
          $identity = Get-AzUserAssignedIdentity -ResourceGroupName "${{ parameters.resourceGroup }}" -Name $adminUserAssignedManagedIdentityName
          $principalId = $identity.PrincipalId
          $tenantId = $identity.TenantId
          $templateParameters = @{
              sqlServerName = "${{ parameters.sqlServerName }}".ToLower()
              sqlAdministratorLogin = $principalId
              sqlAdministratorSid = $principalId
              sqlAdministratorTenantId = $tenantId
              sqlServerPrincipalType = "User"
          }
        } elseif ($adminApplicationId -ne "") {
          # Fetch principalId and tenantId for service principal
          $app = Get-AzADServicePrincipal -ApplicationId $adminApplicationId
          $principalId = $app.Id
          $tenantId = $app.AppOwnerTenantId
          $templateParameters = @{
              sqlServerName = "${{ parameters.sqlServerName }}".ToLower()
              sqlAdministratorLogin = $principalId
              sqlAdministratorSid = $principalId
              sqlAdministratorTenantId = $tenantId
              sqlServerPrincipalType = "Application"
          }
        } else {
          Write-Error "Either adminUserAssignedManagedIdentityName or adminApplicationId must be provided."
          exit 1
        }

        Write-Host "Provisioning Sql server"
        Write-Host "Resource Group: ${{ parameters.resourceGroup }}"
        Write-Host "SqlServerName: ${{ parameters.sqlServerName }}"
        New-AzResourceGroupDeployment -ResourceGroupName "${{ parameters.resourceGroup }}" -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-sqlServer.json -TemplateParameterObject $templateParameters -Verbose
