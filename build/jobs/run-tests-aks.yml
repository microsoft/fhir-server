parameters:
- name: version
  type: string
- name: dataStore
  type: string
- name: dnsSuffix
  type: string
- name: clusterName
  type: string
- name: clusterResourceGroup
  type: string

jobs:
- job: 'e2eTests'
  dependsOn: []
  pool:
    vmImage: $(WindowsVmImage)
  steps:
  - template: e2e-setup.yml

  - task: AzurePowerShell@4
    displayName: 'Set Variables'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        $secrets = Get-AzKeyVaultSecret -VaultName $(DeploymentEnvironmentName)-ts
        
        foreach($secret in $secrets)
        {
            $environmentVariableName = $secret.Name.Replace("--","_")

            $secretValue = Get-AzKeyVaultSecret -VaultName $(DeploymentEnvironmentName)-ts -Name $secret.Name
            # Replace with -AsPlainText flag when v5.3 of the Az Module is supported
            $plainValue = ([System.Net.NetworkCredential]::new("", $secretValue.SecretValue).Password).ToString()
            if([string]::IsNullOrEmpty($plainValue))
            {
                throw "$($secret.Name) is empty"
            }
            Write-Host "##vso[task.setvariable variable=$($environmentVariableName)]$($plainValue)"
        }

        $dataStore = "${{parameters.dataStore}}"
        if ($dataStore -eq "SqlContainer" -or $dataStore -eq "SqlServer")
        {
            $testFilter = "FullyQualifiedName~SqlServer"
            $ds = $dataStore.ToLower()
            Write-Host "##vso[task.setvariable variable=TestEnvironmentUrl_Sql]https://$(DeploymentEnvironmentName)-stu3-${ds}.${{parameters.dnsSuffix}}"
            Write-Host "##vso[task.setvariable variable=TestEnvironmentUrl_R4_Sql]https://$(DeploymentEnvironmentName)-r4-${ds}.${{parameters.dnsSuffix}}"
            Write-Host "##vso[task.setvariable variable=TestEnvironmentUrl_R5_Sql]https://$(DeploymentEnvironmentName)-r5-${ds}.${{parameters.dnsSuffix}}"
        }
        elseif ($dataStore -eq "CosmosDb")
        {
            $testFilter = "FullyQualifiedName~CosmosDb"
            Write-Host "##vso[task.setvariable variable=TestEnvironmentUrl]https://$(DeploymentEnvironmentName)-stu3-cosmosdb.${{parameters.dnsSuffix}}"
            Write-Host "##vso[task.setvariable variable=TestEnvironmentUrl_R4]https://$(DeploymentEnvironmentName)-r4-cosmosdb.${{parameters.dnsSuffix}}"
            Write-Host "##vso[task.setvariable variable=TestEnvironmentUrl_R5]https://$(DeploymentEnvironmentName)-r5-cosmosdb.${{parameters.dnsSuffix}}"
        }
        else
        {
            Write-Host "Unknon datastore $dataStore"
            exit 1    
        }

        Write-Host "##vso[task.setvariable variable=TestFilter]Category!=SmartOnFhir&${testFilter}"
        Write-Host "##vso[task.setvariable variable=Resource]$(TestEnvironmentUrl)"
        
        $secrets = Get-AzKeyVaultSecret -VaultName resolute-oss-tenant-info
 
        foreach($secret in $secrets)
        {
            $environmentVariableName = $secret.Name.Replace("--","_")

            $secretValue = Get-AzKeyVaultSecret -VaultName resolute-oss-tenant-info -Name $secret.Name
            # Replace with -AsPlainText flag when v5.3 of the Az Module is supported
            $plainValue = ([System.Net.NetworkCredential]::new("", $secretValue.SecretValue).Password).ToString()
            if([string]::IsNullOrEmpty($plainValue))
            {
                throw "$($secret.Name) is empty"
            }
            Write-Host "##vso[task.setvariable variable=$($environmentVariableName)]$($plainValue)"
        }

        $storageAccountName="$(DeploymentEnvironmentName)${{parameters.version}}${{parameters.dataStore}}".ToLower()
        $storageAccountName=$storageAccountName.Replace('-','')
        $storageAccountName=$storageAccountName.Substring(0,[System.Math]::Min($storageAccountName.Length,24))
        $accKey = Get-AzStorageAccountKey -ResourceGroupName ${{parameters.clusterResourceGroup}} -Name $storageAccountName | Where-Object {$_.KeyName -eq "key1"}
        $storageSecretName = "${storageAccountName}_secret"
        Write-Host "##vso[task.setvariable variable=$($storageSecretName)]$($accKey.Value)"
        # ----------------------------------------

  - task: VSTest@2
    displayName: 'Run E2E Tests'
    inputs:
      testSelector: testAssemblies
      testAssemblyVer2: |
        **\*${{ parameters.version }}.Tests.E2E*.dll
      testFiltercriteria: "$(TestFilter)"
      searchFolder: '$(System.ArtifactsDirectory)'
      rerunFailedTests: true
      rerunType: 'basedOnTestFailurePercentage'
      rerunFailedThreshold: '95'
      rerunMaxAttempts: 3
