
parameters:
- name: version
  type: string
- name: sql
  type: boolean
  default: false
- name: webAppName
  type: string
- name: appServicePlanName
  type: string
- name: appServicePlanResourceGroup
  type: string
- name: subscription
  type: string
- name: resourceGroup
  type: string
- name: testEnvironmentUrl
  type: string
- name: imageTag
  type: string
- name: schemaAutomaticUpdatesEnabled
  type: string
  default: 'tool'
- name: sqlServerAdminPassword
  type: string
  default: ''
- name: sqlServerName
  type: string
  default: ''
- name: reindexEnabled
  type: boolean
  default: true

jobs:
- job: provisionEnvironment
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: resolute-oss-tenant-info'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: 'resolute-oss-tenant-info'

  - task: AzurePowerShell@5
    displayName: 'Azure PowerShell script: InlineScript'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Add-Type -AssemblyName System.Web
     
        $deployPath = "$(System.DefaultWorkingDirectory)/test/Configuration"
     
        $testConfig = (ConvertFrom-Json (Get-Content -Raw "$deployPath/testconfiguration.json"))
        $flattenedTestConfig = $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/ConvertTo-FlattenedConfigurationHashtable.ps1 -InputObject $testConfig
     
        $additionalProperties = $flattenedTestConfig
     
        $additionalProperties["SqlServer__DeleteAllDataOnStartup"] = "false"
        $additionalProperties["SqlServer__AllowDatabaseCreation"] = "true"
        $additionalProperties["CosmosDb__InitialDatabaseThroughput"] = 1500
        $additionalProperties["FhirServer__Operations__Import__PollingFrequencyInSeconds"] = 1
        $additionalProperties["FhirServer__Operations__Export__PollingFrequencyInSeconds"] = 1
        $additionalProperties["ASPNETCORE_FORWARDEDHEADERS_ENABLED"] = "true"

        $webAppName = "${{ parameters.webAppName }}".ToLower()
        Write-Host "Web App Name: $webAppName"
        $templateParameters = @{
            fhirVersion = "${{ parameters.version }}"
            appServicePlanName = "${{ parameters.appServicePlanName }}"
            appServicePlanSku = "B3"
            numberOfInstances = 2
            serviceName = $webAppName
            securityAuthenticationAuthority = "https://login.microsoftonline.com/$(tenant-id)"
            securityAuthenticationAudience = "${{ parameters.testEnvironmentUrl }}"
            additionalFhirServerConfigProperties = $additionalProperties 
            enableAadSmartOnFhirProxy = $true
            enableExport = $true
            enableConvertData = $true
            enableImport = $true
            backgroundTaskCount = 5
            enableReindex = if ("${{ parameters.reindexEnabled }}" -eq "true") { $true } else { $false }
            imageTag = '${{ parameters.imageTag }}'
        }
     
        if("${{ parameters.sql }}" -eq "true"){
            # Set SQL Variables
            $templateParameters["solutionType"] = "FhirServerSqlServer"
            $templateParameters["sqlAdminPassword"] = "${{parameters.sqlServerAdminPassword}}"
            $templateParameters["sqlServerName"] = "${{parameters.sqlServerName}}".ToLower()
            $templateParameters["sqlServerNewOrExisting"] = "existing"
            $templateParameters["sqlSchemaAutomaticUpdatesEnabled"] = "${{parameters.schemaAutomaticUpdatesEnabled}}"
        }

        Write-Host "Check for keyvaults in removed state..."
        if (Get-AzKeyVault -VaultName $webAppName -Location $(ResourceGroupRegion) -InRemovedState)
        {
            Remove-AzKeyVault -VaultName $webAppName -InRemovedState -Location $(ResourceGroupRegion) -Force
            Write-Host "Deleted KeyVault in RemovedState."
        }

        Write-Host "Provisioning Resource Group"
        Write-Host "ResourceGroupName: ${{ parameters.resourceGroup }}"

        $deploymentName = $webAppName
        $resourceGroupName = "${{ parameters.resourceGroup }}"

        # Check if a deployment with the specified name already exists
        $existingDeployment = Get-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName -ErrorAction SilentlyContinue

        # If the deployment exists and is ongoing, wait for it to complete
        if ($existingDeployment -and ($existingDeployment.ProvisioningState -eq "Running" -or $existingDeployment.ProvisioningState -eq "Accepted")) {
            Write-Host "Waiting for existing deployment '$deploymentName' to complete..."
            do {
                Start-Sleep -Seconds 10
                $existingDeployment = Get-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName
            } while ($existingDeployment.ProvisioningState -eq "Running" -or $existingDeployment.ProvisioningState -eq "Accepted")
            Write-Host "Existing deployment completed."
        }
        else
        {
          try {
            New-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy-docker.json -TemplateParameterObject $templateParameters -Verbose
          } catch {
            if ("${{ parameters.sql }}" -eq "true") {
              $templateParameters["sqlServerNewOrExisting"] = "new"
              New-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy-docker.json -TemplateParameterObject $templateParameters -Verbose
            }
          }
        }

  - template: ./provision-healthcheck.yml
    parameters: 
      webAppName: ${{ parameters.webAppName }}
