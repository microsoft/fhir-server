parameters:
- name: version
  type: string
- name: sql
  type: boolean
  default: false
- name: webAppName
  type: string
- name: appServicePlanName
  type: string
- name: appServicePlanResourceGroup
  type: string
- name: subscription
  type: string
- name: resourceGroup
  type: string
- name: testEnvironmentUrl
  type: string
- name: imageTag
  type: string
- name: schemaAutomaticUpdatesEnabled
  type: string
  default: 'tool'
- name: sqlServerName
  type: string
  default: ''
- name: sqlComputeTier
  type: string
  default: 'Standard'
- name: reindexEnabled
  type: boolean
  default: true

jobs:
- job: provisionEnvironment
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: resolute-oss-tenant-info'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: 'resolute-oss-tenant-info'

  - task: AzurePowerShell@5
    displayName: 'Azure PowerShell script: InlineScript'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Add-Type -AssemblyName System.Web

        $deployPath = "$(System.DefaultWorkingDirectory)/test/Configuration"

        $testConfig = (ConvertFrom-Json (Get-Content -Raw "$deployPath/testconfiguration.json"))
        $flattenedTestConfig = $(System.DefaultWorkingDirectory)/release/scripts/PowerShell/ConvertTo-FlattenedConfigurationHashtable.ps1 -InputObject $testConfig

        $additionalProperties = $flattenedTestConfig

        $additionalProperties["SqlServer__DeleteAllDataOnStartup"] = "false"
        $additionalProperties["SqlServer__AllowDatabaseCreation"] = "true"
        $additionalProperties["CosmosDb__InitialDatabaseThroughput"] = 1500
        $additionalProperties["TaskHosting__PollingFrequencyInSeconds"] = 2
        $additionalProperties["ASPNETCORE_FORWARDEDHEADERS_ENABLED"] = "true"

        $webAppName = "${{ parameters.webAppName }}".ToLower()
        Write-Host "Web App Name: $webAppName"
        $templateParameters = @{
            fhirVersion = "${{ parameters.version }}"
            appServicePlanName = "${{ parameters.appServicePlanName }}"
            appServicePlanSku = "P2V3"
            numberOfInstances = 2
            serviceName = $webAppName
            securityAuthenticationAuthority = "https://login.microsoftonline.com/$(tenant-id)"
            securityAuthenticationAudience = "${{ parameters.testEnvironmentUrl }}"
            additionalFhirServerConfigProperties = $additionalProperties
            enableAadSmartOnFhirProxy = $true
            enableExport = $true
            enableConvertData = $true
            enableImport = $true
            backgroundTaskCount = 4
            enableReindex = if ("${{ parameters.reindexEnabled }}" -eq "true") { $true } else { $false }
            registryName = '$(azureContainerRegistry)'
            imageTag = '${{ parameters.imageTag }}'
            isNspExisting = $true
        }

        if("${{ parameters.sql }}" -eq "true"){
            # Set SQL Variables
            $templateParameters["solutionType"] = "FhirServerSqlServer"
            $templateParameters["sqlServerName"] = "${{parameters.sqlServerName}}".ToLower()
            $templateParameters["sqlServerNewOrExisting"] = "existing"
            $templateParameters["sqlSchemaAutomaticUpdatesEnabled"] = "${{parameters.schemaAutomaticUpdatesEnabled}}"
            $templateParameters["sqlDatabaseComputeTier"] = "${{parameters.sqlComputeTier}}"
        }

        $deploymentName = $webAppName
        $resourceGroupName = "${{ parameters.resourceGroup }}"

        Write-Host "Check for keyvaults in removed state..."
        if (Get-AzKeyVault -VaultName $webAppName -Location $(ResourceGroupRegion) -InRemovedState)
        {
            Undo-AzKeyVaultRemoval -VaultName $webAppName -ResourceGroupName $resourceGroupName -Location $(ResourceGroupRegion)
            Write-Host "KeyVault $webAppName is restored"
        }

        Write-Host "Provisioning Resource Group"
        Write-Host "ResourceGroupName: ${{ parameters.resourceGroup }}"

        # Set NSP name to match ARM template convention
        $nspName = "nsp-$resourceGroupName"
        $templateParameters["networkSecurityPerimeterName"] = $nspName

        # Check if a deployment with the specified name already exists
        $existingDeployment = Get-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName -ErrorAction SilentlyContinue

        # If the deployment exists and is ongoing, wait for it to complete
        if ($existingDeployment -and ($existingDeployment.ProvisioningState -eq "Running" -or $existingDeployment.ProvisioningState -eq "Accepted")) {
            Write-Host "Waiting for existing deployment '$deploymentName' to complete..."
            do {
                Start-Sleep -Seconds 10
                $existingDeployment = Get-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName
            } while ($existingDeployment.ProvisioningState -eq "Running" -or $existingDeployment.ProvisioningState -eq "Accepted")
            Write-Host "Existing deployment completed."
        }
        else
        {
          try {
            New-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy-docker.json -TemplateParameterObject $templateParameters -Verbose
          } catch {
            if ("${{ parameters.sql }}" -eq "true") {
              $templateParameters["sqlServerNewOrExisting"] = "new"
              New-AzResourceGroupDeployment -Name $deploymentName -ResourceGroupName $resourceGroupName -TemplateFile $(System.DefaultWorkingDirectory)/samples/templates/default-azuredeploy-docker.json -TemplateParameterObject $templateParameters -Verbose
            }
          }
        }

        if("${{ parameters.sql }}" -eq "false"){
            Write-Host "Add DevOps MI permission to Cosmos database"

            $account = Get-AzContext
            $principalId = (Get-AzADServicePrincipal -ApplicationId $account.Account.Id).Id

            New-AzCosmosDBSqlRoleAssignment `
              -AccountName $webAppName `
              -ResourceGroupName $resourceGroupName `
              -Scope "/" `
              -PrincipalId $principalId `
              -RoleDefinitionId "00000000-0000-0000-0000-000000000002"

            # Associate CosmosDB with Network Security Perimeter using inline ARM template (consistent with SQL Server approach)
            Write-Host "Associating CosmosDB with Network Security Perimeter: $nspName"
            
            try {
                # Use inline ARM template deployment similar to provision-sqlServer.yml
                $associationName = "cosmosdb-$webAppName-association"
                
                Write-Host "Creating NSP association using inline ARM template..."
                Write-Host "NSP Name: $nspName"
                Write-Host "CosmosDB Account: $webAppName"
                Write-Host "Association Name: $associationName"
                
                $inlineTemplate = @{
                    '$schema' = 'https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#'
                    'contentVersion' = '1.0.0.0'
                    'parameters' = @{
                        'nspName' = @{
                            'type' = 'string'
                        }
                        'cosmosDbAccountName' = @{
                            'type' = 'string'
                        }
                        'associationName' = @{
                            'type' = 'string'
                        }
                    }
                    'resources' = @(
                        @{
                            'type' = 'Microsoft.Network/networkSecurityPerimeters/resourceAssociations'
                            'apiVersion' = '2023-07-01-preview'
                            'name' = "[concat(parameters('nspName'), '/', parameters('associationName'))]"
                            'properties' = @{
                                'privateLinkResource' = @{
                                    'id' = "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
                                }
                                'profile' = @{
                                    'id' = "[resourceId('Microsoft.Network/networkSecurityPerimeters/profiles', parameters('nspName'), 'default')]"
                                }
                                'accessMode' = 'Learning'
                            }
                        }
                    )
                    'outputs' = @{
                        'associationResourceId' = @{
                            'type' = 'string'
                            'value' = "[resourceId('Microsoft.Network/networkSecurityPerimeters/resourceAssociations', parameters('nspName'), parameters('associationName'))]"
                        }
                    }
                }
                
                $deploymentParameters = @{
                    'nspName' = $nspName
                    'cosmosDbAccountName' = $webAppName
                    'associationName' = $associationName
                }
                
                # Deploy using inline template
                $nspDeploymentResult = New-AzResourceGroupDeployment `
                  -ResourceGroupName $resourceGroupName `
                  -Name "$webAppName-cosmosdb-nsp-association-inline" `
                  -TemplateObject $inlineTemplate `
                  -TemplateParameterObject $deploymentParameters `
                  -Verbose
                
                Write-Host "Successfully associated CosmosDB with NSP using inline ARM template"
                Write-Host "Association Resource ID: $($nspDeploymentResult.Outputs.associationResourceId.Value)"
            }
            catch {
                Write-Warning "Failed to associate CosmosDB with NSP: $($_.Exception.Message)"
                Write-Host "Exception Details: $($_.Exception | Format-List * | Out-String)"
                Write-Host "Continuing with CosmosDB provisioning..."
            }
        }
  - template: ./provision-healthcheck.yml
    parameters:
      webAppName: ${{ parameters.webAppName }}
