parameters:
- name: version
  type: string
- name: keyVaultName
  type: string
- name: appServiceName
  type: string
- name: integrationSqlServerName
  type: string
jobs:

- job: "CosmosIntegrationTests"
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false
    
  - task: UseDotNet@2
    inputs:
      useGlobalJson: true

  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ${{ parameters.keyVaultName }}'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: '${{ parameters.keyVaultName }}'

  - task: AzurePowerShell@5
    displayName: 'Set Workload Identity Variables'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_CLIENT_ID]$env:AZURESUBSCRIPTION_CLIENT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_TENANT_ID]$env:AZURESUBSCRIPTION_TENANT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_SERVICE_CONNECTION_ID]$env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID"

        $appServiceName = '${{ parameters.appServiceName }}'
        $appSettings = (Get-AzWebApp -ResourceGroupName $(ResourceGroupName) -Name $appServiceName).SiteConfig.AppSettings
        $dataStoreResourceId = $appSettings | where {$_.Name -eq "FhirServer__ResourceManager__DataStoreResourceId"}
        $dataStoreResourceId = $dataStoreResourceId[0].Value
        Write-Host "$dataStoreResourceId"
        Write-Host "##vso[task.setvariable variable=DataStoreResourceId]$($dataStoreResourceId)"

  - task: DotNetCoreCLI@2
    displayName: 'Build integration test projects'
    inputs:
      command: build
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--configuration $(buildConfiguration) -f $(defaultBuildFramework)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Cosmos Integration Tests with coverage'
    inputs:
      command: test
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--filter DisplayName!~SqlServer --configuration $(buildConfiguration) --collect "XPlat Code Coverage" -s "$(build.sourcesDirectory)/CodeCoverage.runsettings" -v normal --no-build -f $(defaultBuildFramework)'
      testRunTitle: '${{ parameters.version }} Cosmos Integration Tests'
      publishTestResults: true
    env:
      'CosmosDb__Host': $(CosmosDb--Host)
      'FhirServer__ResourceManager__DataStoreResourceId': '$(DataStoreResourceId)'
      'CosmosDb__UseManagedIdentity': true
      'AZURESUBSCRIPTION_CLIENT_ID': '$(AZURESUBSCRIPTION_CLIENT_ID)'
      'AZURESUBSCRIPTION_TENANT_ID': '$(AZURESUBSCRIPTION_TENANT_ID)'
      'AZURESUBSCRIPTION_SERVICE_CONNECTION_ID': '$(AZURESUBSCRIPTION_SERVICE_CONNECTION_ID)'
      'SYSTEM_ACCESSTOKEN': $(System.AccessToken)

  - task: reportgenerator@5
    displayName: 'Aggregate Cosmos integration test coverage'
    condition: succeededOrFailed()
    inputs:
      reports: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      reporttypes: 'Cobertura'
      targetdir: '$(Agent.TempDirectory)/coverage'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Cosmos integration test coverage'
    inputs:
      pathToPublish: '$(Agent.TempDirectory)/coverage'
      artifactName: 'Coverage_IntegrationTests_Cosmos_${{ parameters.version }}'
      artifactType: 'container'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Cosmos code coverage results'
    condition: always()
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
      reportDirectory: '$(Agent.TempDirectory)/coverage'

- job: "SqlIntegrationTests"
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false
    
  - task: UseDotNet@2
    inputs:
      useGlobalJson: true

  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ${{ parameters.keyVaultName }}-sql'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: '${{ parameters.keyVaultName }}-sql'

  - task: AzurePowerShell@5
    displayName: 'Set Workload Identity Variables'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_CLIENT_ID]$env:AZURESUBSCRIPTION_CLIENT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_TENANT_ID]$env:AZURESUBSCRIPTION_TENANT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_SERVICE_CONNECTION_ID]$env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID"

  - task: DotNetCoreCLI@2
    displayName: 'Build integration test projects'
    inputs:
      command: build
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--configuration $(buildConfiguration) -f $(defaultBuildFramework)'

  - task: DotNetCoreCLI@2
    displayName: 'Run SQL Integration Tests with coverage'
    inputs:
      command: test
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--filter DisplayName!~CosmosDb --configuration $(buildConfiguration) --collect "XPlat Code Coverage" -s "$(build.sourcesDirectory)/CodeCoverage.runsettings" -v normal --no-build -f $(defaultBuildFramework)'
      testRunTitle: '${{ parameters.version }} SQL Integration Tests'
      publishTestResults: true
    env:
      'SqlServer:ConnectionString': 'Server=tcp:${{ parameters.integrationSqlServerName }}.database.windows.net,1433;Initial Catalog=master;Persist Security Info=False;Authentication=ActiveDirectoryWorkloadIdentity;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;User Id=$(AZURESUBSCRIPTION_CLIENT_ID);'
      'AZURESUBSCRIPTION_CLIENT_ID': '$(AZURESUBSCRIPTION_CLIENT_ID)'
      'AZURESUBSCRIPTION_TENANT_ID': '$(AZURESUBSCRIPTION_TENANT_ID)'
      'AZURESUBSCRIPTION_SERVICE_CONNECTION_ID': '$(AZURESUBSCRIPTION_SERVICE_CONNECTION_ID)'
      'SYSTEM_ACCESSTOKEN': $(System.AccessToken)

  - task: reportgenerator@5
    displayName: 'Aggregate SQL integration test coverage'
    condition: succeededOrFailed()
    inputs:
      reports: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      reporttypes: 'Cobertura'
      targetdir: '$(Agent.TempDirectory)/coverage'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish SQL integration test coverage'
    inputs:
      pathToPublish: '$(Agent.TempDirectory)/coverage'
      artifactName: 'Coverage_IntegrationTests_Sql_${{ parameters.version }}'
      artifactType: 'container'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish SQL code coverage results'
    condition: always()
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
      reportDirectory: '$(Agent.TempDirectory)/coverage'

- job: 'cosmosE2eTests'
  dependsOn: []
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - template: e2e-setup.yml
  - template: e2e-tests.yml
    parameters:
      version: ${{ parameters.version }}
      appServiceName: ${{ parameters.appServiceName }}
      appServiceType: 'CosmosDb'

- job: 'sqlE2eTests'
  dependsOn: []
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - template: e2e-setup.yml
  - template: e2e-tests.yml
    parameters:
      version: ${{ parameters.version }}
      appServiceName: '${{ parameters.appServiceName }}-sql'
      appServiceType: 'SqlServer'
