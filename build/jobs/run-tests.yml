parameters:
- name: version
  type: string
- name: keyVaultName
  type: string
- name: appServiceName
  type: string
- name: integrationSqlServerName
  type: string
jobs:

- job: "CosmosIntegrationTests"
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      downloadPath: '$(System.ArtifactsDirectory)'
      artifactName: 'IntegrationTests'
  
  - task: ExtractFiles@1
    displayName: 'Extract Integration Test Binaries'
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)/IntegrationTests/Microsoft.Health.Fhir.${{ parameters.version }}.Tests.Integration.zip'
      destinationFolder: '$(Agent.TempDirectory)/IntegrationTests/'

  - task: UseDotNet@2
    inputs:
      useGlobalJson: true

  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ${{ parameters.keyVaultName }}'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: '${{ parameters.keyVaultName }}'

  - task: DotNetCoreCLI@2
    displayName: 'Run Cosmos Integration Tests'
    inputs:
      command: test
      arguments: '"$(Agent.TempDirectory)/IntegrationTests/**/*${{ parameters.version }}.Tests.Integration*.dll" --filter DisplayName!~SqlServer -v normal'
      workingDirectory: "$(System.ArtifactsDirectory)"
      testRunTitle: '${{ parameters.version }} Integration'
    env:
      'CosmosDb:Host': $(CosmosDb--Host)
      'CosmosDb:Key': $(CosmosDb--Key)

- job: "SqlIntegrationTests"
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      downloadPath: '$(System.ArtifactsDirectory)'
      artifactName: 'IntegrationTests'
  
  - task: ExtractFiles@1
    displayName: 'Extract Integration Test Binaries'
    inputs:
      archiveFilePatterns: '$(System.ArtifactsDirectory)/IntegrationTests/Microsoft.Health.Fhir.${{ parameters.version }}.Tests.Integration.zip'
      destinationFolder: '$(Agent.TempDirectory)/IntegrationTests/'

  - task: UseDotNet@2
    inputs:
      useGlobalJson: true

  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ${{ parameters.keyVaultName }}-sql'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: '${{ parameters.keyVaultName }}-sql'

  - task: AzurePowerShell@5
    displayName: 'Set Workload Identity Variables'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_CLIENT_ID]$env:AZURESUBSCRIPTION_CLIENT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_TENANT_ID]$env:AZURESUBSCRIPTION_TENANT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_SERVICE_CONNECTION_ID]$env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID"

  - task: DotNetCoreCLI@2
    displayName: 'Run Sql Integration Tests'
    inputs:
      command: test
      arguments: '"$(Agent.TempDirectory)/IntegrationTests/**/*${{ parameters.version }}.Tests.Integration*.dll" --filter DisplayName!~Cosmos -v normal'
      workingDirectory: "$(System.ArtifactsDirectory)"
      testRunTitle: '${{ parameters.version }} Integration'
    env:
      'SqlServer:ConnectionString': 'Server=tcp:${{ parameters.integrationSqlServerName }}.database.windows.net,1433;Initial Catalog=master;Persist Security Info=False;Authentication=Active Directory Workload Identity;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;User Id=$(AZURESUBSCRIPTION_CLIENT_ID);'
      'AZURESUBSCRIPTION_CLIENT_ID': '$(AZURESUBSCRIPTION_CLIENT_ID)'
      'AZURESUBSCRIPTION_TENANT_ID': '$(AZURESUBSCRIPTION_TENANT_ID)'
      'AZURESUBSCRIPTION_SERVICE_CONNECTION_ID': '$(AZURESUBSCRIPTION_SERVICE_CONNECTION_ID)'
      'SYSTEM_ACCESSTOKEN': $(System.AccessToken)

- job: 'cosmosE2eTests'
  dependsOn: []
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - template: e2e-setup.yml
  - template: e2e-tests.yml
    parameters:
      version: ${{ parameters.version }}
      appServiceName: ${{ parameters.appServiceName }}
      appServiceType: 'CosmosDb'

- job: 'sqlE2eTests'
  dependsOn: []
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - template: e2e-setup.yml
  - template: e2e-tests.yml
    parameters:
      version: ${{ parameters.version }}
      appServiceName: '${{ parameters.appServiceName }}-sql'
      appServiceType: 'SqlServer'
