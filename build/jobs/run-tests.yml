parameters:
- name: version
  type: string
- name: keyVaultName
  type: string
- name: appServiceName
  type: string
- name: integrationSqlServerName
  type: string
jobs:

- job: "CosmosIntegrationTests"
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false
  - task: Bash@3
    displayName: 'Unzip nested IntegrationTests zips (Cosmos)'
    inputs:
      targetType: 'inline'
      script: |
        #!/bin/bash
        set -euo pipefail
        echo "Looking for nested zip files to extract under $(Agent.TempDirectory)/IntegrationTests"
        find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*.zip' | while read zipfile; do
          relpath=$(realpath --relative-to="$(Agent.TempDirectory)/IntegrationTests" "$zipfile")
          outdir="$(Agent.TempDirectory)/IntegrationTests/unzipped/${relpath%.*}"
          mkdir -p "$outdir"
          echo "Extracting $zipfile -> $outdir"
          unzip -q "$zipfile" -d "$outdir" || true
        done || true

  - task: Bash@3
    displayName: 'Diagnostic: inspect extracted IntegrationTests (Cosmos)'
    inputs:
      targetType: 'inline'
      script: |
        #!/bin/bash
        echo "---- Top-level extracted items: ----"
        ls -la "$(Agent.TempDirectory)/IntegrationTests" || true
        echo
        echo "---- First 500 files (paths): ----"
        find "$(Agent.TempDirectory)/IntegrationTests" -type f | sed -n '1,500p' || true
        echo
        echo "---- Search for runtime / test / collector artifacts: ----"
        find "$(Agent.TempDirectory)/IntegrationTests" -type f \( -iname '*Tests.Integration*.dll' -o -iname '*.deps.json' -o -iname '*.runtimeconfig.json' -o -iname 'Microsoft.NET.Test.Sdk*' -o -iname '*testhost*' -o -iname '*vstest*' -o -iname '*coverlet*' -o -iname '*xunit*' \) -print || true
        echo
        echo "---- Counts: ----"
        echo "DLLs: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*Tests.Integration*.dll' | wc -l)
        echo "deps.json: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*.deps.json' | wc -l)
        echo "runtimeconfig.json: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*.runtimeconfig.json' | wc -l)
        echo "coverlet: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*coverlet*' | wc -l)
        echo "Microsoft.NET.Test.Sdk: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname 'Microsoft.NET.Test.Sdk*' | wc -l)
        echo "testhost: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*testhost*' | wc -l)
    
  - task: UseDotNet@2
    inputs:
      useGlobalJson: true

  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ${{ parameters.keyVaultName }}'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: '${{ parameters.keyVaultName }}'

  - task: AzurePowerShell@5
    displayName: 'Set Workload Identity Variables'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_CLIENT_ID]$env:AZURESUBSCRIPTION_CLIENT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_TENANT_ID]$env:AZURESUBSCRIPTION_TENANT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_SERVICE_CONNECTION_ID]$env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID"

        $appServiceName = '${{ parameters.appServiceName }}'
        $appSettings = (Get-AzWebApp -ResourceGroupName $(ResourceGroupName) -Name $appServiceName).SiteConfig.AppSettings
        $dataStoreResourceId = $appSettings | where {$_.Name -eq "FhirServer__ResourceManager__DataStoreResourceId"}
        $dataStoreResourceId = $dataStoreResourceId[0].Value
        Write-Host "$dataStoreResourceId"
        Write-Host "##vso[task.setvariable variable=DataStoreResourceId]$($dataStoreResourceId)"

  - task: DotNetCoreCLI@2
    displayName: 'Build integration test projects'
    inputs:
      command: build
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--configuration $(buildConfiguration) -f $(defaultBuildFramework)'

  - task: DotNetCoreCLI@2
    displayName: 'Run Cosmos Integration Tests with coverage'
    inputs:
      command: test
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--filter DisplayName!~SqlServer --configuration $(buildConfiguration) --collect "XPlat Code Coverage" -s "$(build.sourcesDirectory)/CodeCoverage.runsettings" -v normal --no-build -f $(defaultBuildFramework)'
      testRunTitle: '${{ parameters.version }} Cosmos Integration Tests'
      publishTestResults: true
    env:
      'CosmosDb__Host': $(CosmosDb--Host)
      'FhirServer__ResourceManager__DataStoreResourceId': '$(DataStoreResourceId)'
      'CosmosDb__UseManagedIdentity': true
      'AZURESUBSCRIPTION_CLIENT_ID': '$(AZURESUBSCRIPTION_CLIENT_ID)'
      'AZURESUBSCRIPTION_TENANT_ID': '$(AZURESUBSCRIPTION_TENANT_ID)'
      'AZURESUBSCRIPTION_SERVICE_CONNECTION_ID': '$(AZURESUBSCRIPTION_SERVICE_CONNECTION_ID)'
      'SYSTEM_ACCESSTOKEN': $(System.AccessToken)
  - task: reportgenerator@5
    displayName: 'Aggregate code coverage'
    condition: succeededOrFailed()
    inputs:
      reports: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      reporttypes: 'Cobertura'
      targetdir: '$(Agent.TempDirectory)/coverage'
  - script: |
      ls -la $(Agent.TempDirectory)
      ls -la $(Agent.TempDirectory)/coverage
    displayName: 'List Temp and Coverage Directories'
  - task: Bash@3
    displayName: 'List and display coverage files'
    inputs:
      targetType: 'inline'
      script: |
        #!/bin/bash
        echo "Searching for coverage.cobertura.xml files in $(Agent.TempDirectory):"
        find "$(Agent.TempDirectory)" -type f -name "coverage.cobertura.xml" | while read file; do
          echo "-------------------------------------------------------"
          echo "Found file: $file"
          echo "-------------------------------------------------------"
          cat "$file"
          echo "-------------------------------------------------------"
        done
  - task: Bash@3
    displayName: 'Display first 10 lines of Cobertura.xml'
    inputs:
      targetType: 'inline'
      script: |
        echo "Displaying first 10 lines of $(Agent.TempDirectory)/coverage/Cobertura.xml:"
        head -n 10 "$(Agent.TempDirectory)/coverage/Cobertura.xml"
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Cosmos Integration code coverage'
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: 'Cobertura'
      failIfCoverageEmpty: true
      summaryFileLocation: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Cobertura.xml'
    inputs:
      pathToPublish: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
      artifactName: 'IntegrationTests'
      artifactType: 'container'

  - task: reportgenerator@5
    displayName: 'Aggregate Cosmos integration test coverage'
    condition: succeededOrFailed()
    inputs:
      reports: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      reporttypes: 'Cobertura'
      targetdir: '$(Agent.TempDirectory)/coverage'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Cosmos integration test coverage'
    inputs:
      pathToPublish: '$(Agent.TempDirectory)/coverage'
      artifactName: 'Coverage_IntegrationTests_Cosmos_${{ parameters.version }}'
      artifactType: 'container'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Cosmos code coverage results'
    condition: always()
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
      reportDirectory: '$(Agent.TempDirectory)/coverage'

- job: "SqlIntegrationTests"
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - checkout: self
    fetchDepth: 1
    fetchTags: false
  - task: Bash@3
    displayName: 'Unzip nested IntegrationTests zips (SQL)'
    inputs:
      targetType: 'inline'
      script: |
        #!/bin/bash
        set -euo pipefail
        echo "Looking for nested zip files to extract under $(Agent.TempDirectory)/IntegrationTests"
        find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*.zip' | while read zipfile; do
          relpath=$(realpath --relative-to="$(Agent.TempDirectory)/IntegrationTests" "$zipfile")
          outdir="$(Agent.TempDirectory)/IntegrationTests/unzipped/${relpath%.*}"
          mkdir -p "$outdir"
          echo "Extracting $zipfile -> $outdir"
          unzip -q "$zipfile" -d "$outdir" || true
        done || true

  - task: Bash@3
    displayName: 'Diagnostic: inspect extracted IntegrationTests (SQL)'
    inputs:
      targetType: 'inline'
      script: |
        #!/bin/bash
        echo "---- Top-level extracted items: ----"
        ls -la "$(Agent.TempDirectory)/IntegrationTests" || true
        echo
        echo "---- First 500 files (paths): ----"
        find "$(Agent.TempDirectory)/IntegrationTests" -type f | sed -n '1,500p' || true
        echo
        echo "---- Search for runtime / test / collector artifacts: ----"
        find "$(Agent.TempDirectory)/IntegrationTests" -type f \( -iname '*Tests.Integration*.dll' -o -iname '*.deps.json' -o -iname '*.runtimeconfig.json' -o -iname 'Microsoft.NET.Test.Sdk*' -o -iname '*testhost*' -o -iname '*vstest*' -o -iname '*coverlet*' -o -iname '*xunit*' \) -print || true
        echo
        echo "---- Counts: ----"
        echo "DLLs: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*Tests.Integration*.dll' | wc -l)
        echo "deps.json: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*.deps.json' | wc -l)
        echo "runtimeconfig.json: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*.runtimeconfig.json' | wc -l)
        echo "coverlet: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*coverlet*' | wc -l)
        echo "Microsoft.NET.Test.Sdk: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname 'Microsoft.NET.Test.Sdk*' | wc -l)
        echo "testhost: " $(find "$(Agent.TempDirectory)/IntegrationTests" -type f -iname '*testhost*' | wc -l)
    
  - task: UseDotNet@2
    inputs:
      useGlobalJson: true

  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: ${{ parameters.keyVaultName }}-sql'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      KeyVaultName: '${{ parameters.keyVaultName }}-sql'

  - task: AzurePowerShell@5
    displayName: 'Set Workload Identity Variables'
    inputs:
      azureSubscription: $(ConnectedServiceName)
      azurePowerShellVersion: latestVersion
      ScriptType: inlineScript
      Inline: |
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_CLIENT_ID]$env:AZURESUBSCRIPTION_CLIENT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_TENANT_ID]$env:AZURESUBSCRIPTION_TENANT_ID"
        Write-Host "##vso[task.setvariable variable=AZURESUBSCRIPTION_SERVICE_CONNECTION_ID]$env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID"

  - task: DotNetCoreCLI@2
    displayName: 'Build integration test projects'
    inputs:
      command: build
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--configuration $(buildConfiguration) -f $(defaultBuildFramework)'

  - task: DotNetCoreCLI@2
    displayName: 'Run SQL Integration Tests with coverage'
    inputs:
      command: test
      projects: 'test/**/*${{ parameters.version }}.Tests.Integration.csproj'
      arguments: '--filter DisplayName!~CosmosDb --configuration $(buildConfiguration) --collect "XPlat Code Coverage" -s "$(build.sourcesDirectory)/CodeCoverage.runsettings" -v normal --no-build -f $(defaultBuildFramework)'
      testRunTitle: '${{ parameters.version }} SQL Integration Tests'
      publishTestResults: true
    env:
      'SqlServer:ConnectionString': 'Server=tcp:${{ parameters.integrationSqlServerName }}.database.windows.net,1433;Initial Catalog=master;Persist Security Info=False;Authentication=ActiveDirectoryWorkloadIdentity;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;User Id=$(AZURESUBSCRIPTION_CLIENT_ID);'
      'AZURESUBSCRIPTION_CLIENT_ID': '$(AZURESUBSCRIPTION_CLIENT_ID)'
      'AZURESUBSCRIPTION_TENANT_ID': '$(AZURESUBSCRIPTION_TENANT_ID)'
      'AZURESUBSCRIPTION_SERVICE_CONNECTION_ID': '$(AZURESUBSCRIPTION_SERVICE_CONNECTION_ID)'
      'SYSTEM_ACCESSTOKEN': $(System.AccessToken)

  - task: reportgenerator@5
    displayName: 'Aggregate SQL integration test coverage'
    condition: succeededOrFailed()
    inputs:
      reports: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      reporttypes: 'Cobertura'
      targetdir: '$(Agent.TempDirectory)/coverage'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish SQL integration test coverage'
    inputs:
      pathToPublish: '$(Agent.TempDirectory)/coverage'
      artifactName: 'Coverage_IntegrationTests_Sql_${{ parameters.version }}'
      artifactType: 'container'

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish SQL code coverage results'
    condition: always()
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
      reportDirectory: '$(Agent.TempDirectory)/coverage'
          echo "-------------------------------------------------------"
        done
  - task: Bash@3
    displayName: 'Display first 10 lines of Cobertura.xml'
    inputs:
      targetType: 'inline'
      script: |
        echo "Displaying first 10 lines of $(Agent.TempDirectory)/coverage/Cobertura.xml:"
        head -n 10 "$(Agent.TempDirectory)/coverage/Cobertura.xml"
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Sql Integration code coverage'
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: 'Cobertura'
      failIfCoverageEmpty: true
      summaryFileLocation: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Cobertura.xml'
    inputs:
      pathToPublish: '$(Agent.TempDirectory)/coverage/Cobertura.xml'
      artifactName: 'IntegrationTests'
      artifactType: 'container'

- job: 'cosmosE2eTests'
  dependsOn: []
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - template: e2e-setup.yml
  - template: e2e-tests.yml
    parameters:
      version: ${{ parameters.version }}
      appServiceName: ${{ parameters.appServiceName }}
      appServiceType: 'CosmosDb'

- job: 'sqlE2eTests'
  dependsOn: []
  pool:
    name: '$(SharedLinuxPool)'
    vmImage: '$(LinuxVmImage)'
  steps:
  - template: e2e-setup.yml
  - template: e2e-tests.yml
    parameters:
      version: ${{ parameters.version }}
      appServiceName: '${{ parameters.appServiceName }}-sql'
      appServiceType: 'SqlServer'
