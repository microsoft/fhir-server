parameters:
- name: displayName
  type: string
- name: testCommand
  type: string
- name: workingDirectory
  type: string
  default: "$(System.ArtifactsDirectory)"
- name: testRunTitle
  type: string
- name: maxAttempts
  type: number
  default: 3
- name: retryDelaySeconds
  type: number
  default: 30
- name: environmentVariables
  type: object
  default: {}
- name: additionalArguments
  type: string
  default: ""

steps:
- task: PowerShell@2
  displayName: '${{ parameters.displayName }}'
  inputs:
    targetType: 'inline'
    workingDirectory: ${{ parameters.workingDirectory }}
    script: |
      $maxAttempts = ${{ parameters.maxAttempts }}
      $attempt = 1
      $success = $false
      $retryDelay = ${{ parameters.retryDelaySeconds }}
      
      while ($attempt -le $maxAttempts -and -not $success) {
          Write-Host "##[section]Starting attempt $attempt of $maxAttempts for: ${{ parameters.displayName }}"
          
          try {
              $testCommand = '${{ parameters.testCommand }}'
              if ('${{ parameters.additionalArguments }}' -ne '') {
                  $testCommand += ' ${{ parameters.additionalArguments }}'
              }
              
              Write-Host "##[command]Executing: $testCommand"
              
              # Parse the command properly for cross-platform execution
              # Use regex to properly split command while preserving quoted arguments
              $regex = '(?:[^\s"]+|"[^"]*")+'
              $parts = [regex]::Matches($testCommand, $regex) | ForEach-Object { $_.Value.Trim('"') }
              
              if ($parts.Count -gt 0) {
                  $executable = $parts[0]
                  $arguments = $parts[1..($parts.Count-1)]
                  
                  # Execute using & operator with splatting for proper argument handling
                  & $executable @arguments
                  $exitCode = $LASTEXITCODE
              } else {
                  throw "Unable to parse command: $testCommand"
              }
              
              if ($exitCode -eq 0) {
                  $success = $true
                  Write-Host "##[section]‚úÖ Tests passed on attempt $attempt"
              } else {
                  Write-Host "##[warning]‚ùå Tests failed on attempt $attempt with exit code $exitCode"
                  if ($attempt -eq $maxAttempts) {
                      Write-Host "##[error]üí• All $maxAttempts attempts failed"
                      exit $exitCode
                  }
              }
          } catch {
              Write-Host "##[error]üí• Exception on attempt $attempt`: $_"
              if ($attempt -eq $maxAttempts) {
                  throw
              }
          }
          
          $attempt++
          if (-not $success -and $attempt -le $maxAttempts) {
              Write-Host "##[warning]‚è≥ Waiting $retryDelay seconds before retry..."
              Start-Sleep -Seconds $retryDelay
          }
      }
      
      Write-Host "##vso[task.setvariable variable=TestRunTitle]${{ parameters.testRunTitle }} (Completed after $($attempt-1) attempts)"
  env: ${{ parameters.environmentVariables }}
