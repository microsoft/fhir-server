parameters:
  - name: scriptContent
    type: string
  - name: displayName
    type: string
  - name: moduleNames
    type: object
    default:
      - Microsoft.Graph.Authentication
  - name: AgeThresholdDays
    type: int
    default: 30

steps:
- task: AzureKeyVault@1
  displayName: 'Azure Key Vault: resolute-oss-tenant-info'
  inputs:
    azureSubscription: $(ConnectedServiceName)
    KeyVaultName: 'resolute-oss-tenant-info'

- task: AzurePowerShell@5
  displayName: ${{ parameters.displayName }}
  inputs:
    azureSubscription: $(ConnectedServiceName)
    azurePowerShellVersion: latestVersion
    ScriptType: inlineScript
    Inline: |
      # Parameters for Azure AD connection
      $TenantId = "$(tenant-id)"
      $ClientId = "$(tenant-admin-service-principal-id)"
      $ClientSecret = "$(tenant-admin-service-principal-password)"
      $AgeThresholdDays = ${{ parameters.AgeThresholdDays }}

      # Install and Import Microsoft Graph Modules
      Write-Host "Installing Microsoft Graph modules..."
      $modules = @(${{ join(format('"{0}"', parameters.moduleNames), ', ') }})
      
      foreach ($module in $modules) {
        Install-Module -Name $module -Force -Scope CurrentUser -ErrorAction Stop
        Import-Module $module
      }

      Write-Host "Microsoft Graph modules installed and imported."

      # Connect to Microsoft Graph API
      try {
          Write-Host "Connecting to Microsoft Graph API using client credentials..."
          $secureClientSecret = ConvertTo-SecureString -String $ClientSecret -AsPlainText -Force
          $ClientSecretCredential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $ClientId, $secureClientSecret

          Connect-MgGraph -TenantId $TenantId -ClientSecretCredential $ClientSecretCredential

          # Verify connection
          $graphConnection = Get-MgContext
          if ($null -eq $graphConnection) {
              throw "Failed to establish Microsoft Graph connection"
          }
          
          Write-Host "Successfully connected to Microsoft Graph API as: $($graphConnection.Account)"
      } catch {
          Write-Error "Failed to connect to Microsoft Graph API: $($_.Exception.Message)"
          # Exit the script if connection fails
          exit 1
      }

      # Calculate date threshold if it's defined
      if ($null -ne $AgeThresholdDays) {
        $cutoffDate = (Get-Date).AddDays(-$AgeThresholdDays)
        Write-Host "Cutoff date for deletion: $cutoffDate (Resources created BEFORE this date will be targeted)"
      }

      # Execute the specific operation script
      ${{ parameters.scriptContent }}
      
      # Disconnect from Microsoft Graph API
      Disconnect-MgGraph -ErrorAction SilentlyContinue
      Write-Host "Disconnected from Microsoft Graph API."
    ErrorActionPreference: Stop
    FailOnStderr: true