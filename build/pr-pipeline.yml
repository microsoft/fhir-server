# DESCRIPTION: 	
# Builds, tests, and packages the solution for all PR requests.	

trigger: none

variables:
- template: pr-variables.yml
- template: build-variables.yml

stages:
- stage: UpdateVersion
  displayName: 'Determine Semver'
  dependsOn: []
  jobs:
  - job: Semver
    pool:
      name: '$(DefaultLinuxPool)'
      vmImage: '$(LinuxVmImage)'
    steps:
    - template: ./jobs/update-semver.yml  
    - powershell: |
        $buildNumber = "$(semVer)".replace(".", "").replace("-", "")
        $buildNumber = $buildNumber.subString(0, [System.Math]::Min(15, $buildNumber.Length))

        Write-Host "##vso[build.updatebuildnumber]$buildNumber" 
        Write-Host "Updated  build number to '$buildNumber"
      name: SetBuildVersion

- stage: BuildUnitTests
  displayName: 'Build and run unit tests'
  dependsOn:
  - UpdateVersion
  variables:
    assemblySemVer: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.assemblySemVer']]
    assemblySemFileVer: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.assemblySemFileVer']]
    informationalVersion: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.informationalVersion']]
    majorMinorPatch: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.majorMinorPatch']]
    nuGetVersion: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.nuGetVersion']]
  jobs:
  - job: Windows_dotnet9
    pool:
      name: '$(DefaultWindowsPool)'
    steps:
    - template: ./jobs/build.yml
      parameters:
        targetBuildFramework: $(defaultBuildFramework)
        unitTest: false
        codeCoverage: true
  - job: Linux_dotnet8
    pool:
      name: '$(DefaultLinuxPool)'
      vmImage: '$(LinuxVmImage)'
    steps:
    - template: ./jobs/build.yml
      parameters:
        targetBuildFramework: 'net8.0'

- stage: BuildArtifacts
  displayName: 'Build artifacts'
  dependsOn:
  - UpdateVersion
  variables:
    assemblySemVer: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.assemblySemVer']]
    assemblySemFileVer: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.assemblySemFileVer']]
    informationalVersion: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.informationalVersion']]
    majorMinorPatch: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.majorMinorPatch']]
    nuGetVersion: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.nuGetVersion']]
  jobs:
  - job: Linux_BuildAndPackage
    pool:
      name: '$(DefaultLinuxPool)'
      vmImage: '$(LinuxVmImage)'
    steps:
    - template: ./jobs/build.yml
      parameters:
        codeCoverage: false
        unitTest: false
        componentGovernance: true
        packageArtifacts: true
        packageIntegrationTests: true

- stage: AnalyzeSecurity
  displayName: 'Run Security Analysis and Validate'
  dependsOn:
  - BuildUnitTests
  - BuildArtifacts
  jobs:
  - job: Guardian
    pool:
      name: '$(DefaultWindowsPool)'
    steps:
    - template: ./jobs/analyze.yml

- stage: DockerBuild  
  displayName: 'Build images'
  dependsOn:
  - UpdateVersion
  variables:
    assemblySemFileVer: $[stageDependencies.UpdateVersion.Semver.outputs['SetVariablesFromGitVersion.assemblySemFileVer']]
  jobs:
  - template: ./jobs/docker-build-all.yml
    parameters: 
      tag: $(ImageTag)
      buildPlatform: $(testDockerImagePlatforms)

- stage: provisionEnvironment
  displayName: Provision Environment
  dependsOn: []
  jobs:
  - job: provision
    displayName: 'Create Resource Group'
    pool:
      name: '$(DefaultLinuxPool)'
      vmImage: '$(LinuxVmImage)'
    steps:
    - task: AzurePowerShell@5
      displayName: Provision Resource Group
      inputs:
        azureSubscription: $(ConnectedServiceName)
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          try
          {
            Get-AzResourceGroup -Name $(ResourceGroupName) | Remove-AzResourceGroup -Verbose -Force
          }
          catch
          {}
          New-AzResourceGroup -Name "$(ResourceGroupName)" -Location "$(ResourceGroupRegion)" -Force
    - template: ./jobs/add-resource-group-role-assignments.yml
      parameters:
        azureSubscription: $(ConnectedServiceName)
        resourceGroupName: $(ResourceGroupName)

- stage: setupEnvironment
  displayName: Setup Test Environment
  dependsOn:
  - UpdateVersion
  - provisionEnvironment
  jobs:
  - template: ./jobs/cleanup-aad.yml
  - job: setup
    displayName: 'Setup AAD'
    dependsOn:
    - cleanupAad
    pool:
      vmImage: '$(WindowsVmImage)'
    steps:
    - template: ./jobs/add-aad-test-environment.yml

- stage: cleanup
  displayName: 'Cleanup Azure Environment'
  dependsOn:
  - setupEnvironment
  jobs:
  - template: ./jobs/cleanup.yml

